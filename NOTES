# Known Issues

In co-op, co-op partners can't pick up Scavenge Steel upgrades (probably not Scavenge Blood either).
When selecting multiple upgrades in one go, the newly selected ones are missing tooltips(??!)

min_lives_per_level doesn't work if you don't get any bonus lives at all, due to the line:
  if (!bonus_count) return;

# Roadmap

## gzArchipelago

### next bugfix
- webhost support
  - might be sufficient to add archipelago.json to the pk3
  - needs keys:
    - game: "gzDoom"
    - player: player index, integer
    - patch_file_ending: ".pk3"
  - on download the server will also add server: "host:port" if possible
    so maybe we can get the server from it in-game and pass it to the client?!
- https://github.com/ToxicFrog/doom-mods/issues/51 for quoting issue
- update GDT hashes
- properly generate mapinfo even when not in persistent mode
- chex quest fails to gen with small items enabled

### general notes on scanner/logic changes

This is mostly based on what needs to change to support Faithless, but it'll help
a bunch of other games as well.

We need to support logic dependencies on things other than keys. This is trickier.
At the moment the keyset implicitly means "these keys scoped to the enclosing level".
We probably need to promote scoped keys to their fully qualified names when generating
the keyset, and do the same when processing tuning files. It's probably ok if we
don't include weapons in tuning for now, but we should be able to express them
in the logic file.

We need event support. We need, for example, to be able to say that Faithless
E1M4 and E1M5 aren't in logic until you can trigger the Garden Portal Activated
event in the gardens, or that E1M1 Under Belltower isn't in logic until after you
flip the switch for the portcullis (in addition to having the green key). This is
something that apdoom has an easier time representing because it has subregions
for its levels. This also means that we need a way to refer to events from AP-ITEM/
AP-CHECK logic.

Adventures of Square would benefit from being able to model weapons that are also
keys; frozen notes that the Hellshell Launcher can be used to break certain walls
that normally require TNT box manipulation. This also ties in with the need to
be able to represent logic requirements that aren't just keys.

### Item tag rewrite

Basic idea: replace item categories with item tags. An item can have any number
of tags.

Logic format changes, `category` changes to either `categories` or `tags` -- latter
is more precise, but has overlap with GZD's use of `tag` to mean `player-facing name`.
Let's go with `categories` for now.

Parser needs to continue supporting legacy `category` field, split on `-` and put
each word into a separate cat.

Internally each item stores cats as a set of strings. Most tests become set membership
tests rather than equality tests.

Scanner logic gets updated, emits `categories` (or maybe we keep using `category`
but change the categorization for some things?)

YAML is the tricky one, we need to change the current proportion map into a list
of (category, amount) pairs and iterate it in order for each item and the first
one matching is used.

### scanner

- map exclusion UI
- list maps to scan as ranges or globbing expressions?

### generator

- option to treat bosses as checks -- also needs scanner changes, highly vulnerable
  to enemy-replacement mods
  - could try placing the check in the boss's inventory, and on the ground where
    the boss would be if we can't find it
- alternate win conditions:
  - find N victory tokens
  - find N secrets
- option to choose the X% of an item category game-wide rather than per-map
- item tag support, allowing to treat "small", "health", and "secret" (e.g.) as
  separate tags -- need to figure out how the YAML works for this

### ingame

- TT has a bunch of stuff that breaks it: single-use teleport lines, scripts that
  take away your guns and keys on level start
  - we can probably be better about keeping the player's key inventory up to
    date, at least.
  - can we do anything about weapons? remember how many the player has been
    vended and re-vend them if they run out?

- "gzap for apdoom users" man page
- option to disable tuning generation
- some hints received when playing in the weekly sync did not display on the
  map screen
- Ashes 2063 reports duplicate keys because of the way keys are handled -- you
  pick up the BluePassCard and it gives you a BlueCard in your inventory, which
  the AP runtime then identifies as a new key scoped to that level, which can be
  a bit confusing but generally does not affect normal play.
-

### Faithless

This handles much more like a unified game than a collection of isolated levels.
Each episode is an entire hubcluster and there's a lot of cross-map interaction,
e.g. there's a whole area in E1M1 (including an exit to another map) that's only
accessible after flipping a switch in E1M3 *and* picking up a key in E1M5.

Logic is probably going to need to be updated with event handling, for stuff
like the above -- it can't currently understand that even if you have the E1M5
key you also need to trigger the E1M3 event.

Entering a door can take you to a level you don't have the access code for yet.
We can easily fix this just by checking for access on WorldLoaded and kicking
the player back to the hub if they don't have it. We might even be able to do it
on WorldUnloaded and redirect the transition, but probably not.

AP doesn't distinguish between level entries. So if you have something like an
area in map A that you can only reach initially by going through map B, it
doesn't understand that you need map B access to get there. This can probably be
dealt with using events again; put an AP-EVENT in map B with the requisite
requirements and make that area in map A contingent on it. But it's tricky to
get right.

Leaving a level through an interlevel portal counts as "finishing the level",
since it's a level exit to another level that isn't a save-restore. This means
once you have access to a level you can "beat" it by just entering and
immediately leaving through a portal.

We might be able to do something by watching for line 74 (TELEPORT_NEWMAP) and
75 (TELEPORT_ENDGAME) triggers, but if the developer used scripting all bets are
off and we just see the WorldUnloaded event.

### Golden Souls

Basic structure is one central hub map from which all other maps branch off. Access
to these maps is gated based on number of Golden Souls or Big Coins found, with
only map accessible initially.

Each map contains weapons, ammo, health, small coins, enemies (which drop small coins),
and one or more Golden Souls and Big Coins. Some levels contain red coins and all
red coins must be collected to reveal the GS.

For this we probably want to abandon access tokens entirely, or model them as-well-as
golden souls. This means we also need a way to say "the requirements for entering
map X are Y". It already has full persistence and a hub, so we don't need the
generated MAPINFO or even, probably, the level select screen.

Internally, we have a bunch of inventory items:
Star_Soul - golden soul
Big_Coin_Total, Big_Coin - incremented when you find a BC
BigCoinsInMap - you get one of these when in a map that has BCs
Token_BigCoinCounter - map-specific, gain one for each big coin
RedCoinsInMap, Token_RedCoinCounter - as above but for red coins

Initially progress is completely linear, with one level == one soul, and the next
level needing N+1 souls to access. As you find secret levels and big coins, though,
you can get ahead of the soul curve; secret levels contain one soul and no big coins.

There are three secret levels that must be found via exits in other maps, and three
more that require 12, 24, or 36 big coins to reach.

At 8 souls, you unlock 4 more levels all at once.

To reach the final boss, you need 15 souls; since there are only 12 "normal" levels,
you also need to do at least three of the (secret hidden + secret bigcoin) levels.

## Indes

## Bonsai

### Indes integration
Make stuff like "Extra lives on boss kill" available as extra upgrades or as effects
on level up when using the integration.

### Laevis

- random effect on bonsai level up
  - needs bonsai distinction between "level-up earned" and "level-up claimed" with corresponding netevents
  - needs to play nice with respecs (probably meaning: ignore them)
- option: limit random effects based on rarity

### 0.11.x?

Bandolier rewrite idea: instead of directly affecting ammo capacity, siphon off ammo
when it's nearly full and restore it when it gets low.

### SoM addons/patches
- [X] elementals only, no bandoliers/elementals/weapon upgrades: ignore
- [ ] ammo reserves: integrate as bandoliers replacement
- [X] angelic shards: integrate into compat repo
- [X] war trophies no DOT kills: integrate into compat repo
- [X] always weapon damage: integrate as CVAR
- [ ] ammo leech fix: integrate
- [ ] level requirement for elements: see if there's a way to make this doable as an addon rather than a patch?
- [ ] DRLA & LD rapid fire fixes: integrate, see if there's a more general fix
- [ ] levelup reject settings: integrate
- [X] HE shot damage type fix: integrate
- [X] XP curves: integrate

### Soon

- feature: automatic level up on map clear
  - how do we configure this? levels per map, maps per level, both?
    - maps per level
    - are levels flat or catch-up

- fire rebalance
- weapon: Familiarization, scales damage based on levels cleared (ever, or since you got the upgrade?)
- player: Ammo Crate, refills ammo up to 40/70/90/100% between maps
- player: Medical Supplies & Repair Kit, as above but for health and armour, probably 50/100/150/200
- weapon: some sort of upgrade that resets on level change and gets stronger per kill or something?
- per kill scaling of stuff in general?
- HE shots do lots of self-damage when used with weapons like the shotgun/SSG
- Rapid Fire makes it impossible to drop weapons in Legendoom

- Balance: dark harvest and leech health/armour should probably only increase the cap when leveled and increase the amount much more rarely
- Minelayer upgrade? Dead enemies turn into mines, or you drop mines sometimes. Upgrade for Explosive Death maybe? Appears only if you have ExD and Minelayer?
- submunitions are still completely OP
- Explosive Death launches you into the ceiling

- automatically generate UPGRADES.md using console commands
  - this is more annoying than it looks, because in addition to upgrade names, descriptions,
    and tooltips, UPGRADES also contains:
    - overviews of the different elemental debuffs and how they work
    - an overview of how elemental trees, mastery, and dual-mastery upgrades work
    - level limits, for ugprades that have level caps
    - prerequisites (sometimes)
    so doing this properly will have to combine pre-written text with the dump contents,
    probably using some sort of templating system, which in turn means it needs to be
    smart about categorizing the upgrades, and each upgrade needs to be annotate with
    its requirement information.

- Juggler should work with fancy weapon switch animations (Hellrider, Project Brutality, etc)
- Balance: thunderbolt is probably still too powerful
- Spread Fire projectile upgrade, projectile shots spawn multiple reduced-damage projectiles
  - upgrade that spawns extra projectiles every N shots
- Beam hitscan upgrade -- currently WIP, rename Hypervelocity
- Singularity on-kill upgrade, spawns a black hole that sucks enemies (but not the player) towards it

### Ideas

### ranger

GB: on level end, select between scavenge upgrades or nothing
GB: scavenge upgrades are probabilistic, chance scaling with level, enemy hp, +BOSS

### rhythmcorvid

piercing shot is too weak -- make it do full damage but only hit once per enemy? can this be made performant?
bouncy shots should explode on each bounce
upgrades should all limit themselves to stop upgrading once the increased levels no longer do anything meaningful

### doomthing445

- night vision upgrade that adjusts sector light levels
- projectile/impact aoe effect that does something other than damage

### AvzinTW

An upgrade that causes projectiles to bounce off you, as an alternative to the ECM upgrade collection.

### MsrSgtShooterPerson

Upgrade that adds random projectiles from any player weapon or monster in the game into your shots (either picked at random when you choose the upgrade or as you fire).

### Ideas from Shatter-Thought

Timer on upgrade menu that chooses a random upgrade for you after time expires

Blood-Sourced replicated ammo: Enemies killed by this weapon have a 10% to put out ammo for the **** weapon (**** would be adjustable in the options so the player can choose a weapon that the effect helps to spit out ammo for.)

Psycho-Serum: Enemies hit by this weapon have a 1% chance per level to turn on their former allies for 20 seconds. Cannot affect enemy already effected by Argent Steroids (I thought 1 percent per level was the most balanced choice.)

Argent Steroids: On the first hit, a target is given an extra 35% health, and becomes 50 percent more aggressive (Just the one time for the first time damaged), upon dying, the enemy explodes violently, stacks with explosive death. Cannot affect enemy already affected with Psycho-Serum effect (The intention for this idea is a risk/reward effect to give a player a tougher target they can level up weapons on, but at the risk of a more dangerous opponent.)

### ideas from ferretmanjcdenton

X Making a gun shoot turrets.

A bullet which lands on an enemies and exploded in 4 grenade like thingies which itself fly upwards only to. Come crashing down resulting in 4 more big explosions .

The fragmentation shot could be upgraded in so many ways .
If there is a way to choose multiple upgrades for an upgrade would open even more possibilities . imagine an fragmentation shot with the homing ability applied to the fragmented bullets and that one can be upgraded to home in on heads ..

### ideas from xubs

Trauma Kit: Player upgrade. Healing is now 25% more effective from all sources (minimum of 1 additional healing), however all healing except the additional 25% is applied slowly, with a healing rate of 3 (more per level) HP per second. [This upgrade would massively benefit things like Health Bonuses, effectively doubling their healing from 1 to 2 with basically no downside, but only mildly benefit things like Soul Spheres with the potential downside of forcing the player to play better and avoid damage for longer to maximize this upgrade's effectiveness.]
    ​
Center of Mass: Weapon upgrade. Standing still builds stacks of Focus. Firing or moving expends all stacks of Focus. Focus increases damage, with more stacks increasing damage further. Level increases the maximum amount of Focus stacks the player may obtain. [Basically just a sniper-style upgrade, benefiting weapons which do a lot of damage all at once.]
​
Crossfire: Weapons with this ability will do 30% extra damage for 3 seconds after it is switched to. Afterwards, it will do -15% damage. Mutually exclusive with the Damage upgrade. [To benefit the chronic weapon switchers out there, or especially weapon mods which contain reloading weapons.]

### ideas from retronutcase

First off, this is an absolutely solid mod. LOVE IT! There's definitely some things I think it could use, tweak wise, but that's just me, so take anything I say with a grain of salt, these are just my thoughts, I'm not gonna hound you over these ideas or anything.

-The fact things like Submunitions and Fragmentation can proc elemental effects from the get go makes them obscenely powerful for element purposes. I feel like they should require a rare weapon upgrade to be able to proc elemental effects.

-I am not 100% sure on this, but can Submunitions that kill an enemy trigger more submunitions? If so, this feels like it should also require a rare upgrade to actually allow for it. Something like "Chain Reaction: Allows death explosions and submunitions to trigger their effects on enemies they kill."

On another note, maybe to spice things up, offer upgrades that come with upsides and downsides? Some examples of what I mean:

-Superdense: Adds 50% more damage to projectile weapons, but also inflicts a 25% speed penalty in exchange per level.

-HP Ammo: Adds 50% more damage to hitscan weapons, but they now fire projectiles (They cannot gain projectile based upgrades however). Further upgrades increase weapon spread by 25% per level.

-Big Spender: The weapon gains 50% more damage, but its ammo cost is doubled. Both bonuses are doubled on future level ups: 100% more damage and 4x ammo cost, 200% more damage but 8x ammo cost, etc.

Also, I feel like we could use some more common type upgrades to balance out the really strong ones like Submunitions and Fragmentation. I admit, I dunno how feasible these would be for a universal system

-Critical Hit: 10% chance to increase weapon damage by 50% when firing. Unlocks Critical Damage and Critical Chance upgrades which further improve these. Critical chance is +5% chance per level, caps at level 8. Critical Damage increases the damage bonus by 5% per level and caps at level 10.

-Critical Gamble: Reduces non critical damage by by 50%, but boosts Critical Chance by 5% per level, and Critical Damage by 10% per level. Caps at Level 5.

-Suppressor: Reduces weapon noise and distance per level. At level 5, the weapon becomes completely silent.

-Free Shot: 5% chance to not consume ammo per level, caps at level 10.

There's definitely potential for more variety in character upgrades too, I think:

-Better Healing: +1 Health from Health Bonuses, +5 Health from Stimpacks, +10 Health from Medkits per level. Caps at Level 5. Rare upgrade

-Charged Shots: When not firing, the damage of your next shot increases over time. Starts at 50% with a 25% damage gain per second. Upgrades increase max charge and charge rate by 25% per level. Rare uipgrade.

-Stronger Armor: Adds +5% to green armor protection value and +10% blue armor protection value per level. rare upgrade.

-Sneak Attack: Adds 50% damage when striking an unaware enemy. Damage increases by 12.5% per level, caps at level 4. Rare upgrade.

### Someday

- investigate use of A_SetTics() instead of freeze powerup for Swiftness
- investigate embrittlement instakill proccing earlier than it should; observed offing a 3000hp enemy at 1300hp
  - might be working as intended
- thunderbolt should be easier to trigger? Alex can't trigger it at all with one level and a pistol against a pinky


### Eventually?

- per-state overrides in BONSAIRC, e.g. "if the weapon is in this state, treat it as this other weapon instead"
- allow per-state overrides to create virtual weapons for cases where there is no underlying real weapon, like the Ashes boot knife
- allow tracking primary and alt fire separately, probably using state overrides to tell it which states count as which


### Later

- BONSAIRC support for binding specific weapon *states* to other weapons?
- general purpose pluggable XP sources for e.g. currency in mods that have it?

Remaining upgrades:
- Ignition
- max health increase
- Shoryuken
- explosive fragmentation
- micromissiles -- projectiles turn into micromissile swarms after a few tics of flight. How do we compute damage?

Gameplay changes:
- do another pass over the prerequisites. Graph paper? submunitions/expldeath should mutex, for example
- add "eat weapons to gain their power" feature to LD integration

Internal changes:
- factor out some shared code like "spawn a helper actor and set its target pointer appropriately", "spawn an expanding ring of particle effects", "do something to everything within a given radius", etc.

UI changes:
- Pointing at an enemy should show you how many stacks of each debuff it has. We can
  use AimTarget to get the target under cursor. Note that AimTarget is play scope, so
  we can't call it from ui, I think.

Structural changes:
- split Laevis (legendoom integration) & Gun Bonsai (weapon leveling) into separate mods

## Splitting Laevis into its own mod

Laevis features:
- eat LD weapons to add their powers to your own weapon
- switch between powers

Gun Bonsai features:
- leveling up LD weapons adds new powers

## Damage numbers

http://www.doom2.net/single/weaponfaq.html has some useful values for attack rates, DPS, etc that can be used for balancing.

DPS: 22/88, 25, 68/147, 88, 159+220, 263
RPM: 120/480, 150, 58/42, 530, 106, 700

I really need to implement softcap support!

20% damage -> stacks with 35 stacks/second decay == 175 dps for steady state
5 stacks/second decay (using TickDot()) -> 25 dps for steady state
## Player-level upgrades

- max health
- life/armour regeneration out of combat?

## Weapon-level upgrades

These all have to be possible without subclassing, so this is kind of spitballing; some of these may not be feasible to implement.
I think that we have access to the projectile at creation time (via WorldThingSpawned) and the projectile/puff at damage time (via ModifyDamage and/or WorldThingDamaged).

Basic "number go up" upgrades:
- knockback
  weapon kickback & projectilekickback property
  will need some tuning (a value of 500 gives noticeable but not excessive kickback to the pistol)
  needs to be applied before the gun fires, so we need some kind of ApplyUpgradesToWeapon(wpn)
  call we can call after LevelUp

More complicated upgrades:
- AoE stun
  Use A_Explode and then have a custom damage handler? Spawn some kind of explosion actor?
- submunitions in flight
  Spawn() or use A_ThrowGrenade(), needs custom class definition for submunition
- submunitions on impact
  as above
- turns enemies into friends
  set FRIENDLY flag when damage threshold reached or w/e

Upgrades inspired by DoomRL:
- increase max health
- increased speed
- berserk after successful hits/kills
- show secrets/monsters/items/etc on map
- damage type modifications (e.g. shrapnel -> AP)
- damage resistance while firing

## Event ordering in StaticEventHandler

When starting a new game:
- PlayerSpawned
- PlayerEntered
- WorldLoaded
- WorldTick (!)
- WorldThingSpawned for every actor
- more WorldTick

When loading a game:
- WorldLoaded
- more WorldTick

