// HUD configuration.
// x and y are HUD position. Values in the [0,1] range position it as a proportion
// of the screen size; so (0,0) is flush to the top left corner and (1,1) flush
// to the bottom right.
// Positive integer values >1 place it at that absolute pixel position from the
// top left, and negative values likewise from the bottom right.
// Scale values <=1 are a scaling factor to be applied; >1 are a size in px
// to scale the height to. The width will be scaled automatically and is 3x the
// height.
user float bonsai_hud_x = 0.01;
user float bonsai_hud_y = 0.02;
user float bonsai_hud_size = 0.15;
user float bonsai_hud_alpha = 1.0;
user color bonsai_hud_rgb_frame = "00 FF FF";
user color bonsai_hud_rgb_weapon = "00 80 FF";
user color bonsai_hud_rgb_player = "00 FF 80";
user int bonsai_hud_mirror = 2;
user int bonsai_hud_skin = 1;

// Other non-HUD UI settings
user bool bonsai_levelup_flash = true;
user color bonsai_levelup_flash_rgb = "FF FF FF";
user int bonsai_levelup_sound_mode = 1;
user string bonsai_levelup_sound = "";
user int bonsai_vfx_mode = 2;

// How many options the player is present with when they level up.
// 1: choose automatically.
// 0: full list.
server int bonsai_upgrade_choices_per_gun_level = 4;
server int bonsai_upgrade_choices_per_player_level = 4;
// How many times the player needs to level up their guns before they get a
// permanent player-wide bonus.
server int bonsai_gun_levels_per_player_level = 7;

// Base XP needed to go from level 0 to level 1. Cost for future levels scales
// based on this.
// At the default setting of 1200 and linear scaling, it's enough that clearing
// MAP01 on UV will just barely get you one level-up.
// Conversely, clearing MAP01 of Sunder (a slaughterwad) will let you level all
// of your guns to level 2, or one of them to level 5.
server int bonsai_base_level_cost = 1200;

// XP cost increase curve. Enum:
// 0 - constant
// 1 - linear
// 2 - quadratic
// 3 - cubic
// 4 - exponential
server int bonsai_xp_curve = 1;

// Level-up cost multipliers for melee weapons, puny weapons, explosive weapons,
// and the BFG. These require the corresponding weapon flags to be set, which
// not all mods do (but they are set correctly for base Doom/Doom2, at least).
server float bonsai_level_cost_mul_for_melee = 0.5;
server float bonsai_level_cost_mul_for_wimpy = 0.5;
// TODO: These two are currently disabled due to not working right.
server float bonsai_level_cost_mul_for_explosive = 1.5;
server float bonsai_level_cost_mul_for_bfg = 1.5;

// Multipliers for generation of weapon XP. Damage is builtin and by default assigns
// XP on a 1:1 basis. Score requires an appropriate mod installed like LazyPoints
// or MetaDoom.
server float bonsai_damage_to_xp_factor = 1.0;
server float bonsai_score_to_xp_factor = 0.0;
// TODO: add support for War Trophies XP here, which is stored separately.
// This is difficult because we can't reflectively call the thinker it uses to
// store XP. The wt_stats_experience cvar holds XP but is updated only on save.
// We can manually initiate a save with `netevent WT_ForceSave` but that produces
// console spam and may have performance implications, and we can't set the
// autosave interval any more frequent than 60 seconds.

// How to remember weapon upgrade info.
// 0 - per weapon object
// 1 - per weapon object but transferable to a new weapon of the same type if you lose the old one
// 2 - per weapon class
server int bonsai_upgrade_binding_mode = 1;
server bool bonsai_ignore_death_exits = true;

// Whether to use builtin actors or generic HealthBonus/ArmorBonus actors for
// drops generated by Scavenge skills. Builtins are (almost) guaranteed to work
// properly, but won't respect replacements some mods make of these actors.
server bool bonsai_use_builtin_actors = true;

// Whether weapons that don't use ammo count as "wimpy".
server bool bonsai_ammoless_weapons_are_wimpy = true;

// How often (if at all) to respec weapons.
server int bonsai_respec_interval = 0;

// AutoAutoSave integration
// Need to be server, not user, because AAS integration works by injecting a
// token object into the game, and if users have different settings for this
// it will desync.
server bool bonsai_autosave_after_level = true;
