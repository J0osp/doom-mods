#### Ashes 2063 configuration ####
require MAP00 92a4314fb0847d33ab8559d637e7435d;

# Ashes does something weird here where it has a bunch of custom keys, but under
# the hood it uses the normal skull/keycard actors -- each key is a CustomInventory
# that when picked up gives you the corresponding vanilla key!
# This works, but also causes some confusing UI stuff at runtime because it results
# in AP picking up the originals as additional keys -- so e.g. MAP01, which has
# the BluePassCard, will give you a BlueCard once you pick it up, which will in
# turn result in it identifying that map as having both a BlueCard and a BluePassCard
# and you as having both of them. Which works, but is untidy.
# Using typename to replace them with the underlying keycards or skulls avoids this,
# but at the cost of them no longer lining up with what the in-level messages say
# and so forth.
# Ideally we'd want some way of saying "treat a BlueCard in the player's inventory
# like a BluePassCard in the AP inventory, and vice versa", or something.
category key:
  BluePassCard RedPassCard YellowPassCard
  AshesSilverKey AshesBronzeKey AshesGoldKey;

# Weapon handling
# shotguns are handled via PumpySpawn, which gives the player pumpaction normally,
# but if they have pumpaction2 (the upgraded PAS) it gives them ammo instead.
# The upgrade is handled normally by giving the player PumpgunBuild2, which, when
# picked up, removes the pumpaction and grants the pumpaction2.
# The SMG is handled similarly: IngramSpawn is the in-world object, which gives
# you Ingram if you have no SMG, or 9mm ammo if you do.
# Ingram2 and Ingram3 are the upgraded versions.
# IngramBuild2 and IngramBuild3 each take away the other two versions and give you
# the 2/3 versions (2 is suppressed, 3 is suppressed + accuracy IIRC?)
# For this to work right we probably want progressive weapon support, or something --
# the first shotgun they find grants pumpaction, second takes that away and grants
# pumpaction2 or pumpgunbuild2?

# So how do I want progressive things to work?
# It needs to be in the GZAPRC, not the logic, because it has to be available
# at runtime.
# But the logic also needs to know at least some things about it to spawn enough --
# e.g. we need at least three Progressive Ingrams in the pool even if number-of-weapons
# is set to a lower value.
#category weapon: PumpySpawn;
# progressive PumpySpawn: pumpaction pumpaction2;

#category weapon: IngramSpawn;
# progressive IngramSpawn: Ingram Ingram2 Ingram3;

# Pipebombs are formally weapons, but since each one in the game just gives you
# one to throw -- i.e. the weapon is also the ammo -- we map them as big-ammo
# instead.
#category big-ammo: pipebomb;

# In normal play -- you get the pumpaction2 by talking to Fortune, accepting her
# bet, then beating her in a race to the bottom of DAM1
# you get the ingram2 (silenced) in Dead Man Walking, by talking to the bunker
# QM in MAP52 and buying a silencer
# you get the ingram3 (fully upgraded) in MAP06, Michonne Circle, by delivering
# the briefcase to Rigs and then choosing "you make weapons?" when he offers you
# a reward (and by having the ingram in your inventory).

# There's also various quest items which are autocategorized as "tools" and should
# instead be categorized as cross-level quest items.
# Some of these are given by ACS and not available to the scanner.
# Handling those properly likely requires the same sort of event support in the
# logic file that Faithless wants.
#category key: QuestRadio QuestJerryCan;