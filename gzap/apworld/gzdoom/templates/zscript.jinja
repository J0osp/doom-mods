version "4.10.0"

class GZAP_DataPackageEventHandler : StaticEventHandler {
  bool singleplayer;
  Map<int, int> locations_to_items;

  override void OnRegister() {
    console.printf("Initializing Archipelago data package.");
    console.printf("This was generated from seed %s for %s.", "{{seed}}", "{{player}}");
    let peh = GZAP_PlayEventHandler.Get();

    self.singleplayer = {{singleplayer}};
    peh.RegisterSkill({{skill}});

    console.printf("Registering %d maps.", {{len(maps)}});
    {% for map in maps %}
      peh.RegisterMap("{{map.map}}", {{map.access_id}}, {{map.automap_id}}, {{map.clear_id}}, {{map.exit_id}});
      {% for check in map.locations %}
        {% if check.pos %}
        peh.RegisterCheck("{{map.map}}", {{check.id}}, "{{check.name}}", {{progression(check.id)}}, ({{check.pos.x}},{{check.pos.y}},{{check.pos.z}}), {{check.pos.angle}});
        {% endif %}
      {% endfor %}
    {% endfor %}

    console.printf("Registering %d items.", {{len(items)}});
    {% for item in items %}
      {% if item.map and item.typename %}
      peh.RegisterKey("{{item.map}}", "{{item.typename}}", {{item.id}});
      {% elif item.typename %}
      peh.RegisterItem("{{item.typename}}", {{item.id}});
      {% endif %}
    {% endfor %}
    // Access codes, automaps, and clear tokens are handled specially and thus
    // not registered here.

    {% if singleplayer %}
    console.printf("Populating singleplayer item table.");
      {% for locid, itemid in singleplayer_items.items() %}
      locations_to_items.Insert({{locid}}, {{itemid}});
      {% endfor %}
    {% endif %}

    console.printf("Granting starting inventory.");
    {% for id in starting_items %}
      peh.GrantItem({{id}});
    {% endfor %}

    console.printf("Archipelago data package initialized.");
  }

  override void NetworkProcess(ConsoleEvent evt) {
    if (!self.singleplayer) return;
    if (evt.name == "ap-check") {
      let apid = locations_to_items.Get(evt.args[0]);
      if (apid) {
        GZAP_PlayEventHandler.Get().GrantItem(apid);
      }
    }
  }
}
